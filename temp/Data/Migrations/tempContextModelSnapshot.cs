// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using temp.Domain;

namespace temp.Data.Migrations
{
    [DbContext(typeof(tempContext))]
    partial class tempContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("temp.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("TotalOrders")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("City")
                        .HasName("IndexCustomerCity");

                    b.HasIndex("Country")
                        .HasName("IndexCustomerCountry");

                    b.HasIndex("Email")
                        .HasName("IndexCustomerEmail");

                    b.HasIndex("LastName")
                        .HasName("IndexCustomerLastName");

                    b.HasIndex("Phone")
                        .HasName("IndexCustomerPhone");

                    b.HasIndex("TotalOrders")
                        .HasName("IndexCustomerTotalOrders");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("temp.Domain.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ErrorDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpReferer")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ErrorDate")
                        .HasName("IndexErrorErrorDate");

                    b.HasIndex("UserId");

                    b.ToTable("Error");
                });

            modelBuilder.Entity("temp.Domain.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginDate")
                        .HasName("IndexLoginLoginDate");

                    b.HasIndex("UserId", "LoginDate")
                        .HasName("IndexLoginUserIdLoginDate");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("temp.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("temp.Domain.ThingA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Boolean")
                        .HasColumnType("bit");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lookup")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("ThingBId")
                        .HasColumnType("int");

                    b.Property<string>("ThingBName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ThingCId")
                        .HasColumnType("int");

                    b.Property<string>("ThingCName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TotalThingsE")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Lookup")
                        .HasName("IndexThingALookup");

                    b.HasIndex("Name")
                        .HasName("IndexThingAName");

                    b.HasIndex("OwnerAlias")
                        .HasName("IndexThingAOwnerAlias");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status")
                        .HasName("IndexThingAStatus");

                    b.HasIndex("Text")
                        .HasName("IndexThingAText");

                    b.HasIndex("ThingBId")
                        .HasName("IndexThingAThingBId");

                    b.HasIndex("ThingBName")
                        .HasName("IndexThingAThingBName");

                    b.HasIndex("ThingCId")
                        .HasName("IndexThingAThingCId");

                    b.HasIndex("ThingCName")
                        .HasName("IndexThingAThingCName");

                    b.ToTable("ThingA");
                });

            modelBuilder.Entity("temp.Domain.ThingB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Boolean")
                        .HasColumnType("bit");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lookup")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("TotalThingsA")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateTime")
                        .HasName("IndexThingBDateTime");

                    b.HasIndex("Lookup")
                        .HasName("IndexThingBLookup");

                    b.HasIndex("Money")
                        .HasName("IndexThingBMoney");

                    b.HasIndex("Name")
                        .HasName("IndexThingBName");

                    b.HasIndex("OwnerAlias")
                        .HasName("IndexThingBOwnerAlias");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status")
                        .HasName("IndexThingBStatus");

                    b.HasIndex("Text")
                        .HasName("IndexThingBText");

                    b.ToTable("ThingB");
                });

            modelBuilder.Entity("temp.Domain.ThingC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Boolean")
                        .HasColumnType("bit");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lookup")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("TotalThingsA")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateTime")
                        .HasName("IndexThingCDateTime");

                    b.HasIndex("Lookup")
                        .HasName("IndexThingCLookup");

                    b.HasIndex("Money")
                        .HasName("IndexThingCMoney");

                    b.HasIndex("Name")
                        .HasName("IndexThingCName");

                    b.HasIndex("OwnerAlias")
                        .HasName("IndexThingCOwnerAlias");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status")
                        .HasName("IndexThingCStatus");

                    b.HasIndex("Text")
                        .HasName("IndexThingCText");

                    b.ToTable("ThingC");
                });

            modelBuilder.Entity("temp.Domain.ThingD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Boolean")
                        .HasColumnType("bit");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lookup")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("TotalThingsE")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateTime")
                        .HasName("IndexThingDDateTime");

                    b.HasIndex("Lookup")
                        .HasName("IndexThingDLookup");

                    b.HasIndex("Money")
                        .HasName("IndexThingDMoney");

                    b.HasIndex("Name")
                        .HasName("IndexThingDName");

                    b.HasIndex("OwnerAlias")
                        .HasName("IndexThingDOwnerAlias");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status")
                        .HasName("IndexThingDStatus");

                    b.HasIndex("Text")
                        .HasName("IndexThingDText");

                    b.ToTable("ThingD");
                });

            modelBuilder.Entity("temp.Domain.ThingE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Boolean")
                        .HasColumnType("bit");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lookup")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(16, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("ThingAId")
                        .HasColumnType("int");

                    b.Property<string>("ThingAName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ThingDId")
                        .HasColumnType("int");

                    b.Property<string>("ThingDName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Lookup")
                        .HasName("IndexThingELookup");

                    b.HasIndex("Money")
                        .HasName("IndexThingEMoney");

                    b.HasIndex("Name")
                        .HasName("IndexThingEName");

                    b.HasIndex("OwnerAlias")
                        .HasName("IndexThingEOwnerAlias");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status")
                        .HasName("IndexThingEStatus");

                    b.HasIndex("Text")
                        .HasName("IndexThingEText");

                    b.HasIndex("ThingAId")
                        .HasName("IndexThingEObject1Id");

                    b.HasIndex("ThingAName")
                        .HasName("IndexThingEObjectAName");

                    b.HasIndex("ThingDId")
                        .HasName("IndexThingEObjectDId");

                    b.HasIndex("ThingDName")
                        .HasName("IndexThingEObjectDName");

                    b.ToTable("ThingE");
                });

            modelBuilder.Entity("temp.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AppKey")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppSecret")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IdentityName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ResetCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(user_name())")
                        .HasMaxLength(20);

                    b.Property<int>("TotalThingsA")
                        .HasColumnType("int");

                    b.Property<int>("TotalThingsB")
                        .HasColumnType("int");

                    b.Property<int>("TotalThingsC")
                        .HasColumnType("int");

                    b.Property<int>("TotalThingsD")
                        .HasColumnType("int");

                    b.Property<int>("TotalThingsE")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_USER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasName("IndexUserAlias");

                    b.HasIndex("Department")
                        .HasName("IndexUserDepartment");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IndexUserEmail");

                    b.HasIndex("EmployeeNumber")
                        .HasName("IndexUserEmployeeNumber");

                    b.HasIndex("IdentityId")
                        .HasName("IndexUserIdentityId");

                    b.HasIndex("IdentityName")
                        .HasName("IndexUserIdentityName");

                    b.HasIndex("LastLoginDate")
                        .HasName("IndexUserLastLoginDate");

                    b.HasIndex("LastName")
                        .HasName("IndexUserLastName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("temp.Domain.Viewed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("WhatId")
                        .HasColumnType("int");

                    b.Property<string>("WhatName")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("WhatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("WhatId", "WhatType")
                        .HasName("IndexViewedWhatWhat");

                    b.HasIndex("UserId", "WhatId", "WhatType")
                        .HasName("IndexViewedUserWhatWhat");

                    b.ToTable("Viewed");
                });

            modelBuilder.Entity("temp.Domain.Error", b =>
                {
                    b.HasOne("temp.Domain.User", "User")
                        .WithMany("Error")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ERROR_REFERENCE_USER");
                });

            modelBuilder.Entity("temp.Domain.Login", b =>
                {
                    b.HasOne("temp.Domain.User", "User")
                        .WithMany("Login")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LOGIN_REFERENCE_USER");
                });

            modelBuilder.Entity("temp.Domain.ThingA", b =>
                {
                    b.HasOne("temp.Domain.User", "Owner")
                        .WithMany("ThingA")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_CAMPAIGN_REF1_USER")
                        .IsRequired();

                    b.HasOne("temp.Domain.ThingB", "ThingB")
                        .WithMany("ThingA")
                        .HasForeignKey("ThingBId")
                        .HasConstraintName("FK_THINGA_REFERENCE_THINGB");

                    b.HasOne("temp.Domain.ThingC", "ThingC")
                        .WithMany("ThingA")
                        .HasForeignKey("ThingCId")
                        .HasConstraintName("FK_THINGA_REFERENCE_THINGC");
                });

            modelBuilder.Entity("temp.Domain.ThingB", b =>
                {
                    b.HasOne("temp.Domain.User", "Owner")
                        .WithMany("ThingB")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_THINGB_REFERENCE_USER")
                        .IsRequired();
                });

            modelBuilder.Entity("temp.Domain.ThingC", b =>
                {
                    b.HasOne("temp.Domain.User", "Owner")
                        .WithMany("ThingC")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_CAMPAIGN_REF2_USER")
                        .IsRequired();
                });

            modelBuilder.Entity("temp.Domain.ThingD", b =>
                {
                    b.HasOne("temp.Domain.User", "Owner")
                        .WithMany("ThingD")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_THINGD_REFERENCE_USER")
                        .IsRequired();
                });

            modelBuilder.Entity("temp.Domain.ThingE", b =>
                {
                    b.HasOne("temp.Domain.User", "Owner")
                        .WithMany("ThingE")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_THINGE_REFERENCE_USER")
                        .IsRequired();

                    b.HasOne("temp.Domain.ThingA", "ThingA")
                        .WithMany("ThingE")
                        .HasForeignKey("ThingAId")
                        .HasConstraintName("FK_THINGE_REFERENCE_THINGA");

                    b.HasOne("temp.Domain.ThingD", "ThingD")
                        .WithMany("ThingE")
                        .HasForeignKey("ThingDId")
                        .HasConstraintName("FK_THINGE_REFERENCE_THINGD");
                });

            modelBuilder.Entity("temp.Domain.Viewed", b =>
                {
                    b.HasOne("temp.Domain.User", "User")
                        .WithMany("Viewed")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_VIEWED_REFERENCE_USER")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
